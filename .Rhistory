data <- data[, c("age", "years in job", "credit_history", "overdue_payments", "owns_property",
"other_loans", "active_loans_0", "active_loans_1", "active_loans_2",
"children_1", "children_2", "children_3", "education_podstawowe",
"education_wyższe", "city_duże", "city_małe", "marital_status_rozwiedziony_rozwiedziona")]
data <- data[ c("age", "years in job", "credit_history", "overdue_payments", "owns_property",
"other_loans", "active_loans_0", "active_loans_1", "active_loans_2",
"children_1", "children_2", "children_3", "education_podstawowe",
"education_wyższe", "city_duże", "city_małe", "marital_status_rozwiedziony_rozwiedziona"),]
data
data <- readRDS("data_after_preparation.rds")
data <- data[ ,  c("age", "years in job", "credit_history", "overdue_payments", "owns_property",
"other_loans", "active_loans_0", "active_loans_1", "active_loans_2",
"children_1", "children_2", "children_3", "education_podstawowe",
"education_wyższe", "city_duże", "city_małe", "marital_status_rozwiedziony_rozwiedziona")]
data <- data[ .,  c("age", "years in job", "credit_history", "overdue_payments", "owns_property",
"other_loans", "active_loans_0", "active_loans_1", "active_loans_2",
"children_1", "children_2", "children_3", "education_podstawowe",
"education_wyższe", "city_duże", "city_małe", "marital_status_rozwiedziony_rozwiedziona")]
data[c("age", "years in job", "credit_history", "overdue_payments", "owns_property",
"other_loans", "active_loans_0", "active_loans_1", "active_loans_2",
"children_1", "children_2", "children_3", "education_podstawowe",
"education_wyższe", "city_duże", "city_małe", "marital_status_rozwiedziony_rozwiedziona"), .]
data[c("age", "years in job", "credit_history", "overdue_payments", "owns_property",
"other_loans", "active_loans_0", "active_loans_1", "active_loans_2",
"children_1", "children_2", "children_3", "education_podstawowe",
"education_wyższe", "city_duże", "city_małe", "marital_status_rozwiedziony_rozwiedziona")]
data
data[c("age", "years_in_job", "credit_history", "overdue_payments", "owns_property",
"other_loans", "active_loans_0", "active_loans_1", "active_loans_2",
"children_1", "children_2", "children_3", "education_podstawowe",
"education_wyższe", "city_duże", "city_małe", "marital_status_rozwiedziony_rozwiedziona")]
data
set.seed(222)
podzial <- createDataPartition(
y=data$credit_risk,
times = 1,
p=0.9,
list=F
)
trening <- data[podzial,]
test <- data[-podzial,]
trening
data <- data[c("age", "years_in_job", "credit_history", "overdue_payments", "owns_property",
"other_loans", "active_loans_0", "active_loans_1", "active_loans_2",
"children_1", "children_2", "children_3", "education_podstawowe",
"education_wyższe", "city_duże", "city_małe", "marital_status_rozwiedziony_rozwiedziona")]
#df [9,011 × 17]
set.seed(222)
podzial <- createDataPartition(
y=data$credit_risk,
times = 1,
p=0.9,
list=F
)
#df [9,011 × 17]
data
set.seed(222)
podzial <- createDataPartition(
y=data$credit_risk,
times = 1,
p=0.9,
list=F
)
data <- readRDS("data_after_preparation.rds")
data <- data[c("age", "years_in_job", "credit_history", "overdue_payments", "owns_property",
"other_loans", "active_loans_0", "active_loans_1", "active_loans_2",
"children_1", "children_2", "children_3", "education_podstawowe",
"education_wyższe", "city_duże", "city_małe", "marital_status_rozwiedziony_rozwiedziona","credit_risk")]
#df [9,011 × 17]
data
set.seed(222)
podzial <- createDataPartition(
y=data$credit_risk,
times = 1,
p=0.9,
list=F
)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
set.seed(222)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.9,
list=F
)
sum(data$credit_risk==1)
test[test$credit_risk==1,]
trening[trening$credit_risk==1,]
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.5,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.1,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.01,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=1,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.05,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.01,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.2,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.5,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.8,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.5,
list=F
)
sum(data$credit_risk==1)
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.6,
list=F
)
sum(data$credit_risk==1)
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.6,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
data
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.7,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
trening
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 1,
p=0.7,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
library(randomForest)
library(randomForest)
las <- randomForest(credit_risk~., trening)
las
library(randomForest)
las <- randomForest(credit_risk~., trening)
las
test_lasu
test_lasu <- predict(nasz_las, test1)
test_lasu <- predict(las, test1)
test_lasu <- predict(las, test)
test_lasu
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.1,
list=F
)
sum(data$credit_risk==1)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
library(randomForest)
las <- randomForest(credit_risk~., trening)
las
test_lasu <- predict(las, test)
test_lasu
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.1,
list=F
)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
las$importance
las$ntree
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
las <- randomForest(credit_risk~., trening)
model <- train(credit_risk ~ .,
data = training,
method = 'rf')
las <- randomForest(credit_risk~., trening)
model <- train(credit_risk ~ .,
data = trening,
method = 'rf')
model
model$times
model
data <- readRDS("data_after_preparation.rds")
table(data$credit_risk, data_fac[[1]])
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.1,
list=F
)
trening <- data[podzial,]
test <- data[-podzial,]
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
library(randomForest)
las <- randomForest(credit_risk~., trening)
las$type
las$importance
las$ntree
las
model <- train(credit_risk ~ .,
data = trening,
method = 'rf')
model
model$times
model$times
model
prognoza <-  predict(model, test)
confusionMatrix(prognoza, test$credit_risk)
install.packages("smotefamily")
df_smote <- SMOTE(X = df[, -which(names(df) == "credit_risk")],
target = df$credit_risk,
K = 5,
dup_size = 2)
library(smotefamily)
df_smote <- SMOTE(X = df[, -which(names(df) == "credit_risk")],
target = df$credit_risk,
K = 5,
dup_size = 2)
data <- readRDS("data_after_preparation.rds")
df_smote <- SMOTE(X = data[, -which(names(data) == "credit_risk")],
target = df$credit_risk,
K = 5,
dup_size = 2)
df_smote <- SMOTE(X = data[, -which(names(data) == "credit_risk")],
target = data$credit_risk,
K = 5,
dup_size = 2)
str(data)
minority <- data[data$credit_risk == "1", ]
majority <- data[data$credit_risk == "0", ]
minority_oversampled <- minority[sample(1:nrow(minority),
size = nrow(majority),
replace = TRUE), ]
df_balanced <- rbind(majority, minority_oversampled)
df_balanced
data <- readRDS("data_after_preparation.rds")
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 2,
p=0.1,
list=F
)
trening <- df_balanced[podzial,]
test <- data[-podzial,]
str(data)
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
minority <- trening[trening$credit_risk == "1", ]
majority <- trening[trening$credit_risk == "0", ]
minority_oversampled <- minority[sample(1:nrow(minority),
size = nrow(majority),
replace = TRUE), ]
trening_balanced <- rbind(majority, minority_oversampled)
trening_balanced
test
set.seed(223)
podzial <- createDataPartition(
y=data$credit_risk,
times = 1,
p=0.8,
list=F
)
trening <- df_balanced[podzial,]
test <- data[-podzial,]
str(data)
trening[trening$credit_risk==1,]
test[test$credit_risk==1,]
trening
test
minority <- trening[trening$credit_risk == "1", ]
majority <- trening[trening$credit_risk == "0", ]
minority_oversampled <- minority[sample(1:nrow(minority),
size = nrow(majority),
replace = TRUE), ]
trening_balanced <- rbind(majority, minority_oversampled)
trening_balanced
test
library(randomForest)
las <- randomForest(credit_risk~., trening)
las$type
las$importance
las$ntree
las
model <- train(credit_risk ~ .,
data = trening,
method = 'rf')
model
prognoza <-  predict(model, test)
confusionMatrix(prognoza, test$credit_risk)
predict(las, test)
pr <- predict(las, test)
confusionMatrix(pr, test$credit_risk)
library(randomForest)
las <- randomForest(credit_risk~., trening)
las$type
las$importance
las$ntree
las
pr <- predict(las, test)
confusionMatrix(pr, test$credit_risk)
las2 <- randomForest(credit_risk~., trening, ntree = 1000)
pr2 <- predict(las2, test)
confusionMatrix(pr2, test$credit_risk)
las3 <- randomForest(credit_risk~., trening, ntree = 100)
pr3 <- predict(las3, test)
confusionMatrix(pr3, test$credit_risk)
las3 <- randomForest(credit_risk~., trening, ntree = 10000)
pr3 <- predict(las3, test)
confusionMatrix(pr3, test$credit_risk)
saveRDS(model, "model_rf.rds")
saveRDS(las, "model_rf.rds")
knitr::opts_chunk$set(echo = TRUE)
library(tidymodels)
library(tidymodels)
data <- readRDS("data_after_preparation.rds")
library(tidymodels)
set.seed(223)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DT)
summary_data <- summary(data)
summary_df <- as.data.frame(t(summary_data))
datatable(summary_df,
options = list(pageLength = 6, autoWidth = TRUE), rownames = FALSE )
library(corrplot)
correlation_matrix <- cor(data[, sapply(data, is.numeric)])
corrplot(correlation_matrix, method = "circle", tl.pos = "n" )
library(caret)
featurePlot(x = data_num[,c(1:4)],
y = data$credit_risk,
plot = "box",
scales = list( y = list(relation="free"),
x = list(rot=90) ),
layout = c(2,2))
table(data$credit_risk, data_fac[[1]])
for ( i in 1 : ncol(data_fac) ){
print(names(data_fac[i]))
print(prop.table(table(data$credit_risk, data_fac[[i]])))
}
for ( i in 5 : ncol(data_num) ){
print(names(data_num[i]))
print(prop.table(table(data$credit_risk, data_num[[i]])))
}
las$importance
pr <- predict(las, test)
confusionMatrix(pr, test$credit_risk)
model
prognoza <-  predict(model, test)
confusionMatrix(prognoza, test$credit_risk)
pr2 <- predict(las2, test)
confusionMatrix(pr2, test$credit_risk)
pr3 <- predict(las3, test)
confusionMatrix(pr3, test$credit_risk)
lass <- randomForest(credit_risk~., trening, ntree = 200)
las$type
las$importance
las$ntree
las
lass
prs <- predict(lass, test)
confusionMatrix(prs, test$credit_risk)
lass <- randomForest(credit_risk~., trening, ntree = 150)
lass
prs <- predict(lass, test)
confusionMatrix(prs, test$credit_risk)
lass <- randomForest(credit_risk~., trening, ntree = 10)
lass
prs <- predict(lass, test)
confusionMatrix(prs, test$credit_risk)
lass <- randomForest(credit_risk~., trening, ntree = 50)
lass
prs <- predict(lass, test)
confusionMatrix(prs, test$credit_risk)
lass <- randomForest(credit_risk~., trening, ntree = 60)
lass
prs <- predict(lass, test)
confusionMatrix(prs, test$credit_risk)
saveRDS(lass, "model_rf.rds")
